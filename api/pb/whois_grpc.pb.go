// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserModClient is the client API for UserMod service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserModClient interface {
	//SignInByMobile : login or register by mobile
	SignInByMobile(ctx context.Context, in *ReqMobile, opts ...grpc.CallOption) (*RspUserInfo, error)
	//SignInByWechatOpen : login or register by wechat open
	SignInByWechatOpen(ctx context.Context, in *ReqWechat, opts ...grpc.CallOption) (*RspUserInfo, error)
	//SignInByWechatMiniApp : login or register by wechat mini app
	SignInByWechatMiniApp(ctx context.Context, in *ReqWechat, opts ...grpc.CallOption) (*RspUserInfo, error)
	//BindMobileByWechatOpen : bind mobile by wechat open
	BindMobileByWechatOpen(ctx context.Context, in *ReqWechatBindMobile, opts ...grpc.CallOption) (*RspUserInfo, error)
	//BindMobileByWechatMiniApp : bind mobile by wechat mini app
	BindMobileByWechatMiniApp(ctx context.Context, in *ReqWechatBindMobile, opts ...grpc.CallOption) (*RspUserInfo, error)
	//UpdateNickname : update user nick name
	UpdateNickname(ctx context.Context, in *ReqNickname, opts ...grpc.CallOption) (*RspUserInfo, error)
	//UpdateAvatar : update user avatar
	UpdateAvatar(ctx context.Context, in *ReqAvatar, opts ...grpc.CallOption) (*RspUserInfo, error)
}

type userModClient struct {
	cc grpc.ClientConnInterface
}

func NewUserModClient(cc grpc.ClientConnInterface) UserModClient {
	return &userModClient{cc}
}

func (c *userModClient) SignInByMobile(ctx context.Context, in *ReqMobile, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserMod/SignInByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModClient) SignInByWechatOpen(ctx context.Context, in *ReqWechat, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserMod/SignInByWechatOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModClient) SignInByWechatMiniApp(ctx context.Context, in *ReqWechat, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserMod/SignInByWechatMiniApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModClient) BindMobileByWechatOpen(ctx context.Context, in *ReqWechatBindMobile, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserMod/BindMobileByWechatOpen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModClient) BindMobileByWechatMiniApp(ctx context.Context, in *ReqWechatBindMobile, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserMod/BindMobileByWechatMiniApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModClient) UpdateNickname(ctx context.Context, in *ReqNickname, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserMod/UpdateNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModClient) UpdateAvatar(ctx context.Context, in *ReqAvatar, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserMod/UpdateAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserModServer is the server API for UserMod service.
// All implementations must embed UnimplementedUserModServer
// for forward compatibility
type UserModServer interface {
	//SignInByMobile : login or register by mobile
	SignInByMobile(context.Context, *ReqMobile) (*RspUserInfo, error)
	//SignInByWechatOpen : login or register by wechat open
	SignInByWechatOpen(context.Context, *ReqWechat) (*RspUserInfo, error)
	//SignInByWechatMiniApp : login or register by wechat mini app
	SignInByWechatMiniApp(context.Context, *ReqWechat) (*RspUserInfo, error)
	//BindMobileByWechatOpen : bind mobile by wechat open
	BindMobileByWechatOpen(context.Context, *ReqWechatBindMobile) (*RspUserInfo, error)
	//BindMobileByWechatMiniApp : bind mobile by wechat mini app
	BindMobileByWechatMiniApp(context.Context, *ReqWechatBindMobile) (*RspUserInfo, error)
	//UpdateNickname : update user nick name
	UpdateNickname(context.Context, *ReqNickname) (*RspUserInfo, error)
	//UpdateAvatar : update user avatar
	UpdateAvatar(context.Context, *ReqAvatar) (*RspUserInfo, error)
	mustEmbedUnimplementedUserModServer()
}

// UnimplementedUserModServer must be embedded to have forward compatible implementations.
type UnimplementedUserModServer struct {
}

func (UnimplementedUserModServer) SignInByMobile(context.Context, *ReqMobile) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInByMobile not implemented")
}
func (UnimplementedUserModServer) SignInByWechatOpen(context.Context, *ReqWechat) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInByWechatOpen not implemented")
}
func (UnimplementedUserModServer) SignInByWechatMiniApp(context.Context, *ReqWechat) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInByWechatMiniApp not implemented")
}
func (UnimplementedUserModServer) BindMobileByWechatOpen(context.Context, *ReqWechatBindMobile) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindMobileByWechatOpen not implemented")
}
func (UnimplementedUserModServer) BindMobileByWechatMiniApp(context.Context, *ReqWechatBindMobile) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindMobileByWechatMiniApp not implemented")
}
func (UnimplementedUserModServer) UpdateNickname(context.Context, *ReqNickname) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNickname not implemented")
}
func (UnimplementedUserModServer) UpdateAvatar(context.Context, *ReqAvatar) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvatar not implemented")
}
func (UnimplementedUserModServer) mustEmbedUnimplementedUserModServer() {}

// UnsafeUserModServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserModServer will
// result in compilation errors.
type UnsafeUserModServer interface {
	mustEmbedUnimplementedUserModServer()
}

func RegisterUserModServer(s grpc.ServiceRegistrar, srv UserModServer) {
	s.RegisterService(&UserMod_ServiceDesc, srv)
}

func _UserMod_SignInByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMobile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModServer).SignInByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserMod/SignInByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModServer).SignInByMobile(ctx, req.(*ReqMobile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMod_SignInByWechatOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWechat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModServer).SignInByWechatOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserMod/SignInByWechatOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModServer).SignInByWechatOpen(ctx, req.(*ReqWechat))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMod_SignInByWechatMiniApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWechat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModServer).SignInByWechatMiniApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserMod/SignInByWechatMiniApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModServer).SignInByWechatMiniApp(ctx, req.(*ReqWechat))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMod_BindMobileByWechatOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWechatBindMobile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModServer).BindMobileByWechatOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserMod/BindMobileByWechatOpen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModServer).BindMobileByWechatOpen(ctx, req.(*ReqWechatBindMobile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMod_BindMobileByWechatMiniApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWechatBindMobile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModServer).BindMobileByWechatMiniApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserMod/BindMobileByWechatMiniApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModServer).BindMobileByWechatMiniApp(ctx, req.(*ReqWechatBindMobile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMod_UpdateNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNickname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModServer).UpdateNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserMod/UpdateNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModServer).UpdateNickname(ctx, req.(*ReqNickname))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserMod_UpdateAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModServer).UpdateAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserMod/UpdateAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModServer).UpdateAvatar(ctx, req.(*ReqAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

// UserMod_ServiceDesc is the grpc.ServiceDesc for UserMod service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserMod_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.pinealctx.whois.api.pb.UserMod",
	HandlerType: (*UserModServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignInByMobile",
			Handler:    _UserMod_SignInByMobile_Handler,
		},
		{
			MethodName: "SignInByWechatOpen",
			Handler:    _UserMod_SignInByWechatOpen_Handler,
		},
		{
			MethodName: "SignInByWechatMiniApp",
			Handler:    _UserMod_SignInByWechatMiniApp_Handler,
		},
		{
			MethodName: "BindMobileByWechatOpen",
			Handler:    _UserMod_BindMobileByWechatOpen_Handler,
		},
		{
			MethodName: "BindMobileByWechatMiniApp",
			Handler:    _UserMod_BindMobileByWechatMiniApp_Handler,
		},
		{
			MethodName: "UpdateNickname",
			Handler:    _UserMod_UpdateNickname_Handler,
		},
		{
			MethodName: "UpdateAvatar",
			Handler:    _UserMod_UpdateAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whois.proto",
}

// UserAdminClient is the client API for UserAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAdminClient interface {
	//SetMobileUID : set user id of mobile
	SetMobileUID(ctx context.Context, in *ReqMobileUID, opts ...grpc.CallOption) (*RspUserInfo, error)
	//GetUserInfoByID : get user info by user id
	GetUserInfoByID(ctx context.Context, in *ReqUserKey, opts ...grpc.CallOption) (*RspUserInfo, error)
	//GetUserInfoByMobile : get user info by mobile
	GetUserInfoByMobile(ctx context.Context, in *ReqMobileKey, opts ...grpc.CallOption) (*RspUserInfo, error)
}

type userAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAdminClient(cc grpc.ClientConnInterface) UserAdminClient {
	return &userAdminClient{cc}
}

func (c *userAdminClient) SetMobileUID(ctx context.Context, in *ReqMobileUID, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserAdmin/SetMobileUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminClient) GetUserInfoByID(ctx context.Context, in *ReqUserKey, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserAdmin/GetUserInfoByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAdminClient) GetUserInfoByMobile(ctx context.Context, in *ReqMobileKey, opts ...grpc.CallOption) (*RspUserInfo, error) {
	out := new(RspUserInfo)
	err := c.cc.Invoke(ctx, "/github.com.pinealctx.whois.api.pb.UserAdmin/GetUserInfoByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAdminServer is the server API for UserAdmin service.
// All implementations must embed UnimplementedUserAdminServer
// for forward compatibility
type UserAdminServer interface {
	//SetMobileUID : set user id of mobile
	SetMobileUID(context.Context, *ReqMobileUID) (*RspUserInfo, error)
	//GetUserInfoByID : get user info by user id
	GetUserInfoByID(context.Context, *ReqUserKey) (*RspUserInfo, error)
	//GetUserInfoByMobile : get user info by mobile
	GetUserInfoByMobile(context.Context, *ReqMobileKey) (*RspUserInfo, error)
	mustEmbedUnimplementedUserAdminServer()
}

// UnimplementedUserAdminServer must be embedded to have forward compatible implementations.
type UnimplementedUserAdminServer struct {
}

func (UnimplementedUserAdminServer) SetMobileUID(context.Context, *ReqMobileUID) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMobileUID not implemented")
}
func (UnimplementedUserAdminServer) GetUserInfoByID(context.Context, *ReqUserKey) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByID not implemented")
}
func (UnimplementedUserAdminServer) GetUserInfoByMobile(context.Context, *ReqMobileKey) (*RspUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByMobile not implemented")
}
func (UnimplementedUserAdminServer) mustEmbedUnimplementedUserAdminServer() {}

// UnsafeUserAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAdminServer will
// result in compilation errors.
type UnsafeUserAdminServer interface {
	mustEmbedUnimplementedUserAdminServer()
}

func RegisterUserAdminServer(s grpc.ServiceRegistrar, srv UserAdminServer) {
	s.RegisterService(&UserAdmin_ServiceDesc, srv)
}

func _UserAdmin_SetMobileUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMobileUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).SetMobileUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserAdmin/SetMobileUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).SetMobileUID(ctx, req.(*ReqMobileUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdmin_GetUserInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).GetUserInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserAdmin/GetUserInfoByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).GetUserInfoByID(ctx, req.(*ReqUserKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAdmin_GetUserInfoByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMobileKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAdminServer).GetUserInfoByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.pinealctx.whois.api.pb.UserAdmin/GetUserInfoByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAdminServer).GetUserInfoByMobile(ctx, req.(*ReqMobileKey))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAdmin_ServiceDesc is the grpc.ServiceDesc for UserAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.pinealctx.whois.api.pb.UserAdmin",
	HandlerType: (*UserAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetMobileUID",
			Handler:    _UserAdmin_SetMobileUID_Handler,
		},
		{
			MethodName: "GetUserInfoByID",
			Handler:    _UserAdmin_GetUserInfoByID_Handler,
		},
		{
			MethodName: "GetUserInfoByMobile",
			Handler:    _UserAdmin_GetUserInfoByMobile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whois.proto",
}
